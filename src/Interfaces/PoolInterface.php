<?php

declare(strict_types = 1);

/**
 * @file
 * This file is part of the Stash package.
 *
 * (c) Robert Hafner <tedivm@tedivm.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Stash\Interfaces;

use Psr\Cache\CacheItemPoolInterface;
use Psr\Log\LoggerAwareInterface;
use Stash\InvalidationMethod;

/**
 * @package Stash
 * @author  Robert Hafner <tedivm@tedivm.com>
 */
interface PoolInterface extends CacheItemPoolInterface, LoggerAwareInterface
{
    /**
     * Changes the specific Item class generated by the Pool object.
     *
     * Using this function developers can have the pool class generate custom Item objects.
     *
     * @throws \InvalidArgumentException When passed invalid or nonexistant classes.
     */
    public function setItemClass(string $class): static;

    /**
     * The Purge function allows drivers to perform basic maintenance tasks, such as removing stale or expired items
     * from storage. Not all drivers need this, as many interact with systems that handle them automatically.
     *
     * It's important that this function is not called from inside a normal request, as the maintenance tasks this
     * allows can occasionally take some time to run.
     *
     * @todo Return the number of deleted items.
     *
     * @see \SessionHandlerInterface::gc
     */
    public function purge(): bool;

    /**
     * Sets the driver for use by the caching system. This driver handles the direct interfaceion with the caching
     * backends, keeping the system specific development abstracted out.
     */
    public function setDriver(DriverInterface $driver): static;

    /**
     * Returns the current driver used by the Pool.
     */
    public function getDriver(): DriverInterface;

    /**
     * Places the Pool inside of a "namespace". All Items inside a specific namespace should be completely segmented
     * from all other Items.
     *
     * @param null|string $namespace
     *   Namespaces must be alphanumeric.
     *
     * @throws \InvalidArgumentException Namespaces must be alphanumeric
     */
    public function setNamespace(?string $namespace = null): static;

    /**
     * Returns the current namespace, or false if no namespace was set.
     */
    public function getNamespace(): ?string;

    /**
     * Sets the default cache invalidation method for items created by this pool object.
     *
     * @param \Stash\InvalidationMethod $invalidationMethod
     * @param mixed $arg1
     *   First argument for invalidation method.
     * @param mixed $arg2
     *   Second argument for invalidation method.
     *
     * @see \Stash\InvalidationMethod
     */
    public function setInvalidationMethod(
        InvalidationMethod $invalidationMethod = InvalidationMethod::Precompute,
        mixed $arg1 = null,
        mixed $arg2 = null,
    ): static;
}
