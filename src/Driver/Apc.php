<?php

declare(strict_types = 1);

/**
 * @file
 * This file is part of the Stash package.
 *
 * (c) Robert Hafner <tedivm@tedivm.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Stash\Driver;

use Stash;

/**
 * The APC driver is a wrapper for the APC extension, which allows developers to store data in memory.
 *
 * @package Stash
 * @author  Robert Hafner <tedivm@tedivm.com>
 */
class Apc extends AbstractDriver
{

    /**
     * This driver is available if the apc extension is present and loaded on the system.
     */
    public static function isAvailable(): bool
    {
        // Some versions of HHVM are missing the APCIterator
        if (!class_exists('\APCIterator', false)
            && !class_exists('\APCUIterator', false)
        ) {
            return false;
        }

        if (PHP_SAPI === 'cli' && (int) ini_get('apc.enable_cli') !== 1) {
            return false;
        }

        return function_exists('apcu_fetch') || function_exists('apc_fetch');
    }

    /**
     * Default maximum time an Item will be stored.
     */
    protected int $ttl = 0;

    /**
     * This is an install specific namespace used to segment different applications from interacting with each other
     * when using APC. It's generated by creating an md5 of this file's location.
     */
    protected string $apcNamespace = '';

    /**
     * Whether to use the APCu functions or the original APC ones.
     */
    protected bool $apcu = false;

    /**
     * The number of records \ApcIterator will grab at once.
     */
    protected int $chunkSize = 100;

    /**
     * {@inheritdoc}
     */
    public function isPersistent(): bool
    {
        return true;
    }

    public function getDefaultOptions(): array
    {
        $options = parent::getDefaultOptions();

        return $options + [
            'ttl' => 300,
            'namespace' => md5(__FILE__),

            // Test using the APCUIterator, as some versions of APCU have the
            // custom functions but not the iterator class.
            'apcu' => class_exists('\APCUIterator', false)
        ];
    }

    /**
     * This function should takes an array which is used to pass option values to the driver.
     *
     * * ttl - This is the maximum time the item will be stored.
     * * namespace - This should be used when multiple projects may use the same library.
     */
    protected function setOptions(array $options = []): static
    {
        $options += $this->getDefaultOptions();

        $this->ttl = (int) $options['ttl'];
        $this->apcNamespace = $options['namespace'];
        $this->apcu = $options['apcu'];

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getData(array $key): array
    {
        $keyString = self::makeKey($key);
        $success = null;
        $data = $this->apcu ?
            apcu_fetch($keyString, $success)
            : apc_fetch($keyString, $success);

        return $success ? $data : [];
    }

    /**
     * {@inheritdoc}
     */
    public function storeData(array $key, mixed $data, int $expiration): bool
    {
        $life = $this->getCacheTime($expiration);
        $apcKey = $this->makeKey($key);
        $store = [
            'data' => $data,
            'expiration' => $expiration,
        ];

        return $this->apcu ?
            apcu_store($apcKey, $store, $life)
            : apc_store($apcKey, $store, $life);
    }

    /**
     * {@inheritdoc}
     */
    public function clear(?array $key = null): bool
    {
        if (!$key) {
            return $this->apcu ?
                apcu_clear_cache()
                : apc_clear_cache('user');
        }

        $keyRegex = '[' . $this->makeKey($key) . '*]';
        do {
            $emptyIterator = true;
            $items = $this->apcu ?
                new \APCUIterator($keyRegex, \APC_ITER_KEY, $this->chunkSize)
                : new \APCIterator('user', $keyRegex, \APC_ITER_KEY, $this->chunkSize);

            foreach ($items as $item) {
                $emptyIterator = false;
                $this->apcu ?
                    apcu_delete($item['key'])
                    : apc_delete($item['key']);
            }
        } while (!$emptyIterator);

        return true;
    }

    /**
     * {@inheritdoc}
     */
    public function purge(): bool
    {
        $now = time();
        $keyRegex = '[' . $this->makeKey([]) . '*]';
        $items = $this->apcu ?
            new \APCUIterator($keyRegex, \APC_ITER_KEY, $this->chunkSize)
            : new \APCIterator('user', $keyRegex, \APC_ITER_KEY, $this->chunkSize);

        foreach ($items as $item) {
            $success = null;
            $data = $this->apcu ?
                apcu_fetch($item['key'], $success)
                : apc_fetch($item['key'], $success);

            if ($success && is_array($data) && $data['expiration'] <= $now) {
                $this->apcu ?
                    apcu_delete($item['key'])
                    : apc_delete($item['key']);
            }
        }

        return true;
    }

    /**
     * Turns a key array into a string.
     *
     * @param string[] $key
     */
    protected function makeKey(array $key): string
    {
        // Make it unique per install
        $keyString = md5(__FILE__) . '::';

        if (isset($this->apcNamespace)) {
            $keyString .= $this->apcNamespace . '::';
        }

        foreach ($key as $piece) {
            $keyString .= $piece . '::';
        }

        return $keyString;
    }

    /**
     * Converts a timestamp into a TTL.
     */
    protected function getCacheTime(int $expiration): int
    {
        return min($this->ttl, $expiration - time());
    }
}
